// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model / İstifadəçi Modeli
model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  image            String?
  role             UserRole  @default(CUSTOMER)
  phone            String?
  isActive         Boolean   @default(true)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations / Əlaqələr
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  cartItems     CartItem[]
  orders        Order[]    @relation("CustomerOrders")
  sellerOrders  Order[]    @relation("SellerOrders")
  courierOrders Order[]    @relation("CourierOrders")
  products      Product[]
  courier       Courier?
  reviews       Review[]

  @@map("users")
}

// Account Model (NextAuth.js) / Hesab Modeli
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session Model (NextAuth.js) / Sessiya Modeli
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Verification Token Model (NextAuth.js) / Təsdiq Token Modeli
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Category Model / Kateqoriya Modeli
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations / Əlaqələr
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

// Product Model / Məhsul Modeli
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal
  images      String
  categoryId  String
  sellerId    String
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  isPublished Boolean  @default(false)
  isApproved  Boolean  @default(false)
  publishedAt DateTime?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations / Əlaqələr
  category   Category    @relation(fields: [categoryId], references: [id])
  seller     User        @relation(fields: [sellerId], references: [id])
  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]

  @@map("products")
}

// Address Model / Ünvan Modeli
model Address {
  id        String   @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  latitude  Float?
  longitude Float?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations / Əlaqələr
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

// Order Model / Sifariş Modeli
model Order {
  id              String      @id @default(cuid())
  customerId      String
  sellerId        String
  courierId       String?
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal
  shippingAddress String // JSON string of address
  addressId       String? // Reference to Address model
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations / Əlaqələr
  customer User        @relation("CustomerOrders", fields: [customerId], references: [id])
  seller   User        @relation("SellerOrders", fields: [sellerId], references: [id])
  courier  User?       @relation("CourierOrders", fields: [courierId], references: [id])
  address  Address?    @relation(fields: [addressId], references: [id])
  items    OrderItem[]

  @@map("orders")
}

// Order Item Model / Sifariş Elementi Modeli
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal

  // Relations / Əlaqələr
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Cart Item Model / Səbət Elementi Modeli
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations / Əlaqələr
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("cart_items")
}

// Courier Model / Kuryer Modeli
model Courier {
  id               String      @id @default(cuid())
  userId           String      @unique
  vehicleType      VehicleType
  licenseNumber    String
  isAvailable      Boolean     @default(true)
  currentLatitude  Float?
  currentLongitude Float?
  rating           Float       @default(0)
  totalDeliveries  Int         @default(0)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations / Əlaqələr
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("couriers")
}

// Review Model / Rəy Modeli
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations / Əlaqələr
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Enums / Enum-lar
enum UserRole {
  CUSTOMER
  SELLER
  COURIER
  ADMIN
}

enum OrderStatus {
  PENDING
  PREPARING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  PENDING_APPROVAL
}

enum VehicleType {
  BIKE
  MOTORCYCLE
  CAR
  VAN
}
